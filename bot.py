import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# === CONFIGURATION ===
BOT_TOKEN = '7911451455:AAF9EBoCOinRkVrvA0qqvgpE1-i2ds0PNo8'
ADMIN_ID = 7657798402
MANAGER_USERNAME = 'DenisHRBP_kadry_s_dushoj'  # –±–µ–∑ @

# === FSM STATE ===
class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_request = State()

class GreetForm(StatesGroup):
    name = State()
    phone = State()

# === KEYBOARDS ===
def main_menu():
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìù –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥")],
        [KeyboardButton(text="üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É")],
        [KeyboardButton(text="üåê –û –∫–æ–º–ø–∞–Ω–∏–∏")],
    ], resize_keyboard=True)
    return kb

back_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
], resize_keyboard=True)

# === MAIN LOGIC ===
bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

@dp.message(F.text == "/start")
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# === –ì–ê–ô–î ===
@dp.message(F.text == "üìù –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥")
async def get_guide_step1(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=back_kb)
    await state.set_state(GreetForm.name)

@dp.message(GreetForm.name)
async def get_guide_step2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(GreetForm.phone)

@dp.message(GreetForm.phone)
async def send_guide(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    phone = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
    pdf = FSInputFile("guide.pdf")
    await message.answer_document(pdf, caption="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ—Ç –≤–∞—à –≥–∞–π–¥:", reply_markup=back_kb)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –∞–¥–º–∏–Ω—É
    text = f"üì• –ù–æ–≤—ã–π –ª–∏–¥ (–≥–∞–π–¥)\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    await bot.send_message(ADMIN_ID, text)
    await state.clear()

# === –ó–ê–Ø–í–ö–ê ===
@dp.message(F.text == "üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def request_step1(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=back_kb)
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def request_step2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.waiting_for_phone)

@dp.message(Form.waiting_for_phone)
async def request_step3(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º')")
    await state.set_state(Form.waiting_for_request)

@dp.message(Form.waiting_for_request)
async def request_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req = message.text

    text = (
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ó–∞–ø—Ä–æ—Å: {req}"
    )

    await bot.send_message(ADMIN_ID, text)
    await message.answer(
        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ ‚Äî –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ @{MANAGER_USERNAME}",
        reply_markup=back_kb
    )
    await state.clear()

# === –ú–ï–ù–ï–î–ñ–ï–† ===
@dp.message(F.text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É")
async def contact_manager(message: types.Message):
    await message.answer(f"üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: https://t.me/{MANAGER_USERNAME}", reply_markup=back_kb)

# === –û –ö–û–ú–ü–ê–ù–ò–ò ===
@dp.message(F.text == "üåê –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def about_company(message: types.Message):
    await message.answer(
        "HR-TARGET ‚Äî –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\n"
        "‚öôÔ∏è 18 –ª–µ—Ç –æ–ø—ã—Ç–∞\n"
        "üéØ –ü–æ–¥–±–æ—Ä –ø–µ—Ä–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –æ—Ç 3 –¥–Ω–µ–π\n"
        "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –∑–∞–º–µ–Ω—ã ‚Äî –¥–æ 180 –¥–Ω–µ–π\n"
        "üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://hr-target.ru",
        reply_markup=back_kb
    )

# === RUN ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
